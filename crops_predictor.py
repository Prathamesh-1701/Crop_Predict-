# -*- coding: utf-8 -*-
# ---
# jupyter:
#   jupytext:
#     cell_metadata_filter: -all
#     formats: ipynb,py:percent
#     text_representation:
#       extension: .py
#       format_name: percent
#       format_version: '1.3'
#       jupytext_version: 1.16.0
#   kernelspec:
#     display_name: Python 3 (ipykernel)
#     language: python
#     name: python3
# ---

# %%
"""Crops_Predictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18cEe7mlmxLkv0Q2eGXTlqlaZSnDPAQKC
"""

# %% [markdown]
# importing data

# %%
import pandas as pd
import certifi
import urllib3
# import pickle
from io import BytesIO

# %%
# Set the SSL certificates for requests
http = urllib3.PoolManager(
    cert_reqs='CERT_REQUIRED',
    ca_certs=certifi.where()
)

# %%
# Read the Excel file using requests and BytesIO
url = "https://github.com/shreyas023/HackX/raw/main/Crop_prediction.xlsx"
response = http.request('GET', url)
content = BytesIO(response.data)
crop = pd.read_excel(content, engine='openpyxl')

# %%
# Display the DataFrame
print(crop)

# %% [markdown]
# exploring data

# %%
crop.head()

# %%
crop.describe()

# %%
crop.columns

# %%
crop.shape

# %%
crop.isnull().sum()

# %%
crop.nunique()

# %%
crop.corr(numeric_only=True)

# %%
crop.info()

# %% [markdown]
# preprocessing the data

# %%
from sklearn.preprocessing import LabelEncoder

# %%
le = LabelEncoder()

# %%
le = LabelEncoder()

# %%
crop['Region'] = le.fit_transform(crop['Region'])
crop['WeatherCondition'] = le.fit_transform(crop['WeatherCondition'])
crop['Bulk Nutrient'] = crop['Bulk Nutrient'].astype(str)
crop['SeedQuality'] = crop['SeedQuality'].astype(str)
crop['Crop Cultivation'] = le.fit_transform(crop['Crop_Cultivation'])

# %%
crop.head(10)

# %% [markdown]
# visualising data

# %%
import matplotlib.pyplot as plt
import seaborn as sns

# %%
sns.pairplot(crop)
plt.show()

# %%
import matplotlib.pyplot as plt
import seaborn as sns

# %%
# Identify non-numeric columns
non_numeric_columns = crop.select_dtypes(exclude='number').columns

# %%
# Drop non-numeric columns and convert the remaining data to numeric
crop_numeric = crop.drop(non_numeric_columns, axis=1).apply(pd.to_numeric, errors='coerce')

# %%
# Plot heatmap
plt.figure(figsize=(10, 10))
sns.heatmap(crop_numeric.corr(), annot=True, cmap="YlGnBu")
plt.show()

# %% [markdown]
# train test split

# %%
# Convert 'Bulk Nutrient' and 'Seed Quality' to strings
crop['Bulk Nutrient'] = crop['Bulk Nutrient'].astype(str)
crop['SeedQuality'] = crop['SeedQuality'].astype(str)

# %%
# Train-Test Split
X = crop.drop(['Crop Cultivation', 'Crop_Cultivation', 'Irrigation Method'], axis=1)
y1 = crop['Crop Cultivation']
y2 = crop['Irrigation Method']

# %%
X_train, X_test, y_train, y_test = train_test_split(X, y1, random_state=1, test_size=0.2)
X1_train, X1_test, y1_train, y1_test = train_test_split(X, y2, random_state=1, test_size=0.2)

# %%
from sklearn.model_selection import train_test_split

# %%
X_train, X_test, y_train, y_test = train_test_split(X,y1,random_state=1,test_size=0.2)

# %%
X_train.shape,X_test.shape,y_train.shape,y_test.shape

# %% [markdown]
# training

# %%
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

# %%
# Apply label encoding to 'Crop Cultivation' (target variable)
label_encoder = LabelEncoder()
y_train_encoded = label_encoder.fit_transform(y_train)
y_test_encoded = label_encoder.transform(y_test)

# %%
# Define a column transformer for preprocessing
preprocessor = ColumnTransformer(
    transformers=[
        ('num', 'passthrough', X_train.select_dtypes(exclude='object').columns),
        ('cat', OneHotEncoder(), X_train.select_dtypes(include='object').columns)
    ])

# %%
# Create a pipeline with the preprocessor and the model
pipeline = Pipeline(steps=[('preprocessor', preprocessor),
                            ('model', model)])

# %%
# Fit the pipeline on the training data
pipeline.fit(X_train, y_train_encoded)

# %% [markdown]
# testing

# %%
# Assuming pipeline is your pre-processing pipeline
y_pred = pipeline.predict(X_test)

# %%
from sklearn.metrics import accuracy_score,classification_report

# %%
acc1 = accuracy_score(y_test,y_pred)

# %%
print(classification_report(y_test,y_pred))

# %% [markdown]
# predicting

# %%
crop.iloc[[25]]

# %%
res1 = pipeline.predict(X.iloc[[25]])

# %%
X1_train, X1_test, y1_train, y1_test = train_test_split(X,y2,random_state=1,test_size=0.2)

# %%
X1_train.shape,X1_test.shape,y1_train.shape,y1_test.shape

# %%
pipeline.fit(X1_train,y1_train)

# %%
y1_pred = pipeline.predict(X1_test)

# %%
acc2 = accuracy_score(y1_test,y1_pred)

# %%
print(classification_report(y1_test,y1_pred))

# %%
crop.iloc[[25]]

# %%
res2 = pipeline.predict(X.iloc[[25]])

# %% [markdown]
# conclusion

# %%
print("Suggested Cultivation :",res1)
print("Suggested Irrigation :",res2)

# %%
average = (acc1+acc2)/2
print("Accuracy of model = ",average*100,"%")

# %%
import joblib

# %%
# Assuming 'pipeline' is your scikit-learn pipeline
joblib.dump(pipeline, 'model_pipeline.pkl')

# %%
loaded_pipeline = joblib.load('model_pipeline.pkl')

# %%
# !pip3 install pickle

# %% [markdown]
# pickle.dump(log_reg,open('model.pkl','wb'))
# model=pickle.load(open('model.pkl','rb'))


# %%

# %%

# %%
